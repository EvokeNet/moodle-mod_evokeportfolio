{"version":3,"sources":["../src/addgrade.js"],"names":["define","$","Config","Str","ModalFactory","ModalEvents","Fragment","Ajax","Swal","Y","AddGrade","contextid","registerEventListeners","prototype","modal","gradebutton","click","event","currentTarget","fieldset","closest","openModal","data","bind","portfolioid","userid","create","type","types","SAVE_CANCEL","title","body","getBody","instanceid","then","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","fadeOut","remove","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","message","handleFormSubmissionFailure","e","preventDefault","changeEvent","document","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit","init"],"mappings":"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","sourcesContent":["/**\n * Create chapter js logic.\n *\n * @package    mod_evokeportfolio\n * @copyright  2021 World Bank Group <https://worldbank.org>\n * @author     Willian Mano <willianmanoaraujo@gmail.com>\n */\n\n/* eslint-disable */\ndefine([\n        'jquery',\n        'core/config',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'mod_evokeportfolio/sweetalert',\n        'core/yui'],\n    function($, Config, Str, ModalFactory, ModalEvents, Fragment, Ajax, Swal, Y) {\n        /**\n         * Constructor for the AddGrade.\n         *\n         * @param selector The selector to open the modal\n         * @param contextid The course module contextid\n         */\n        var AddGrade = function(contextid) {\n            this.contextid = contextid;\n\n            this.registerEventListeners();\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        AddGrade.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        AddGrade.prototype.contextid = -1;\n\n        /**\n         * @var {int} gradebutton\n         * @private\n         */\n        AddGrade.prototype.gradebutton = -1;\n\n        AddGrade.prototype.registerEventListeners = function() {\n            $(\".grade-portfolio\").click(function(event) {\n                this.gradebutton = $(event.currentTarget);\n\n                var fieldset = this.gradebutton.closest('.fieldset');\n\n                this.openModal(fieldset.data('portfolioid'), this.gradebutton.data('userid'));\n\n            }.bind(this));\n        };\n\n        AddGrade.prototype.openModal = function(portfolioid, userid) {\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: 'Add grade',\n                body: this.getBody({instanceid: portfolioid, userid: userid}),\n            }).then(function(modal) {\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({instanceid: portfolioid, userid: userid}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                this.modal.show();\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        AddGrade.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('mod_evokeportfolio', 'grade_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        AddGrade.prototype.handleFormSubmissionResponse = function(data) {\n            this.modal.hide();\n\n            // We could trigger an event instead.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            this.gradebutton.closest('.card').fadeOut().remove();\n\n            var Toast = Swal.mixin({\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: 8000,\n                timerProgressBar: true,\n                onOpen: (toast) => {\n                    toast.addEventListener('mouseenter', Swal.stopTimer);\n                    toast.addEventListener('mouseleave', Swal.resumeTimer);\n                }\n            });\n\n            Toast.fire({\n                icon: 'success',\n                title: data.message\n            });\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        AddGrade.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         *\n         * @private\n         *\n         * @param {Event} e Form submission event.\n         */\n        AddGrade.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_evokeportfolio_gradeportfolio',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        AddGrade.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(contextid) {\n                return new AddGrade(contextid);\n            }\n        };\n    }\n);\n"],"file":"addgrade.min.js"}