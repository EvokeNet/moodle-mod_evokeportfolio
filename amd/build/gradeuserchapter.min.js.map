{"version":3,"sources":["../src/gradeuserchapter.js"],"names":["define","$","Config","Str","ModalFactory","ModalEvents","Fragment","Ajax","Swal","Y","GradeUserChapter","selector","contextid","chapterid","userid","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","data","hide","use","M","core_formchangechecker","reset_form_dirty_state","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","message","handleFormSubmissionFailure","e","preventDefault","changeEvent","document","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit"],"mappings":"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","sourcesContent":["/**\n * Create chapter js logic.\n *\n * @package    mod_evokeportfolio\n * @copyright  2021 World Bank Group <https://worldbank.org>\n * @author     Willian Mano <willianmanoaraujo@gmail.com>\n */\n\ndefine([\n        'jquery',\n        'core/config',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'mod_evokeportfolio/sweetalert',\n        'core/yui'],\n    function($, Config, Str, ModalFactory, ModalEvents, Fragment, Ajax, Swal, Y) {\n        /**\n         * Constructor for the GradeUserChapter.\n         *\n         * @param selector The selector to open the modal\n         * @param contextid The course module contextid\n         * @param chapterid The chapter id\n         * @param userid The user id\n         */\n        var GradeUserChapter = function(selector, contextid, chapterid, userid) {\n            this.contextid = contextid;\n\n            this.chapterid = chapterid;\n\n            this.userid = userid;\n\n            this.init(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        GradeUserChapter.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        GradeUserChapter.prototype.contextid = -1;\n\n        /**\n         * @var {int} chapter id\n         * @private\n         */\n        GradeUserChapter.prototype.chapterid = -1;\n\n        /**\n         * @var {int} user id\n         * @private\n         */\n        GradeUserChapter.prototype.userid = -1;\n\n        /**\n         * Set up all of the event handling for the modal.\n         *\n         * @method init\n         */\n        GradeUserChapter.prototype.init = function(selector) {\n            var triggers = $(selector);\n\n            return Str.get_string('page_viewsubmission_addgrade', 'mod_evokeportfolio').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody({chapterid: this.chapterid, userid: this.userid})\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({chapterid: this.chapterid, userid: this.userid}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        GradeUserChapter.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('mod_evokeportfolio', 'gradeuserchapter_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        GradeUserChapter.prototype.handleFormSubmissionResponse = function(data) {\n            this.modal.hide();\n            // We could trigger an event instead.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            var Toast = Swal.mixin({\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                onOpen: (toast) => {\n                    toast.addEventListener('mouseenter', Swal.stopTimer);\n                    toast.addEventListener('mouseleave', Swal.resumeTimer);\n                }\n            });\n\n            Toast.fire({\n                icon: 'success',\n                title: data.message\n            });\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        GradeUserChapter.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         *\n         * @private\n         *\n         * @param {Event} e Form submission event.\n         */\n        GradeUserChapter.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_evokeportfolio_gradeuserchapter',\n                args: {\n                    contextid: this.contextid,\n                    chapterid: this.chapterid,\n                    userid: this.userid,\n                    jsonformdata: JSON.stringify(formData)\n                },\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        GradeUserChapter.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(selector, contextid, chapterid, userid) {\n                return new GradeUserChapter(selector, contextid, chapterid, userid);\n            }\n        };\n    }\n);\n"],"file":"gradeuserchapter.min.js"}